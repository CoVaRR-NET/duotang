p1 <- ggtree(ttree_sub1, mrsd = as.Date(mrdate)) %<+% metasub1[,c("EPI", "pango.group"), drop=FALSE] +
geom_tippoint(color="black", size=1)+
geom_tippoint(aes(color = pango.group), size=0.5)+ #, shape= lab
scale_color_manual(breaks=listpangogp,values=pal)+
#ggtitle("Time tree - Canada - downsample1")+
coord_cartesian(clip = 'off') + theme_tree2(plot.margin=margin(6, 40, 6, 6))+
guides(color = guide_legend(override.aes = list(size = 4) ) )+
theme(legend.position = "right", legend.title = element_blank(), legend.text = element_text(size =12))
p1
df_PTs
head(df_PTs)
plot1 <- gheatmap(p1, df_PTs[, "divisions", drop = FALSE], width= 0.1, color = F, colnames = F, legend_title = F) +
scale_fill_manual(breaks=listPTs, values = pal2)
plot1
rownames(df_PTs) <- metasub1$EPI
listPTs <- unique(metasub1$province)
listPTs <- listPTs[order(listPTs)]
listPTs <- listPTs[-11] #remove hubei
getpal2 <- colorRampPalette(brewer.pal(10, "Spectral")) #"Set3
pal2 <- getpal2(length(listPTs))
names(pal2) <- listPTs
plot1 <- gheatmap(p1, df_PTs[, "divisions", drop = FALSE], width= 0.1, color = F, colnames = F, legend_title = F) +
scale_fill_manual(breaks=listPTs, values = pal2)
plot1
MLtree_sub1$tip.label
p2 <- ggtree(MLtree_sub1) %<+% metasub1[,c("EPI", "pango.group"), drop=FALSE] +
geom_tippoint(color="black", size=1)+
geom_tippoint(aes(color = Variant), size=0.5)+
scale_color_manual(breaks=listpangogp, values = pal)+
#ggtitle("ML tree - Canada - subsample1, n = 8K")+
coord_cartesian(clip = 'off') + theme_tree2(plot.margin=margin(6, 40, 6, 6))+
guides(color = guide_legend(override.aes = list(size = 4) ) )+
theme(legend.position = "right", legend.title = element_blank(), legend.text = element_text(size =12))
p2
p2 <- ggtree(MLtree_sub1) %<+% metasub1[,c("EPI", "pango.group"), drop=FALSE] +
geom_tippoint(color="black", size=1)+
geom_tippoint(aes(color = pango.group), size=0.5)+
scale_color_manual(breaks=listpangogp, values = pal)+
#ggtitle("ML tree - Canada - subsample1, n = 8K")+
coord_cartesian(clip = 'off') + theme_tree2(plot.margin=margin(6, 40, 6, 6))+
guides(color = guide_legend(override.aes = list(size = 4) ) )+
theme(legend.position = "right", legend.title = element_blank(), legend.text = element_text(size =12))
p2
plot2 <- gheatmap(p2, df_PTs[, "divisions", drop = FALSE], width= 0.1, color = F, colnames = F, legend_title = F) +
scale_fill_manual(breaks=listPTs, values = pal2)
plot2
table(metasub1$pango.group)
rooted <- read.tree('./data_needed/iqtree_trimmed_noBA2.nwk')
metadataRTT <- read.delim("./data_needed/subsampling_metadata_V1.tsv")
rooted$tip.label
index1<-match(names,metadataRTT$Date)
names
names<-rooted$tip.label
name_list<-rooted$tip.label
index1<-match(name_list,metadataRTT$Date)
index1
name_list
index1<-match(name_list,metadataRTT$EPI)
index1
date <- metadataRTT$Date[index1]
date
pg <- metadataRTT$pango.group[index1]
blobs <- function(x, y, col, cex=1) {
points(x, y, pch=21, cex=cex)
points(x, y, bg=col, col=rgb(0,0,0,0), pch=21, cex=cex)
}
dlines <- function(x, y, col) {
lines(x, y, lwd=2.5)
lines(x, y, col=col)
}
pal
# total branch length from root to each tip
div <- node.depth.edgelength(rooted)[1:Ntip(rooted)]
par(mar=c(5,5,0,1))
plot(tip.dates, div, type='n', las=1, cex.axis=0.6, cex.lab=0.7, bty='n',
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
plot(dates, div, type='n', las=1, cex.axis=0.6, cex.lab=0.7, bty='n',
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
date
plot(date, div, type='n', las=1, cex.axis=0.6, cex.lab=0.7, bty='n',
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
div
date
format(date)
date<-as.Date(date)
date
plot(date, div, type='n', las=1, cex.axis=0.6, cex.lab=0.7, bty='n',
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
xx <- floor_date(seq(min(tip.dates), max(tip.dates), length.out=5), unit="months")
xx <- floor_date(seq(min(date), max(date), length.out=5), unit="months")
axis(side=1, at=xx, label=format(xx, "%b %Y"), cex.axis=0.6)
plot(date, div, type='n', las=1, cex.axis=0.6, cex.lab=0.7, bty='n',
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
xx <- floor_date(seq(min(date), max(date), length.out=5), unit="months")
axis(side=1, at=xx, label=format(xx, "%b %Y"), cex.axis=0.6)
blobs(date[pg=='other'], div[pg=='other'], col='grey', cex=0.8)
pg
pg <- metadataRTT$pango.group[index1]
pg
metadataRTT$Variant
metadataRTT <- metasub1
name_list<-rooted$tip.label
index1<-match(name_list,metadataRTT$EPI)
date <- metadataRTT$Date[index1]
pg <- metadataRTT$pango.group[index1]
date<-as.Date(date)
pg
pal
names(pal)
voc<-names(pal)
par(mar=c(5,5,0,1))
plot(date, div, type='n', las=1, cex.axis=0.6, cex.lab=0.7, bty='n',
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
xx <- floor_date(seq(min(date), max(date), length.out=5), unit="months")
date
min(date)
max(date)
name_list<-rooted$tip.label
index1<-match(name_list,metadataRTT$EPI)
date <- metadataRTT$Date[index1]
pg <- metadataRTT$pango.group[index1]
date<-as.Date(date)
# total branch length from root to each tip
div <- node.depth.edgelength(rooted)[1:Ntip(rooted)]
blobs <- function(x, y, col, cex=1) {
points(x, y, pch=21, cex=cex)
points(x, y, bg=col, col=rgb(0,0,0,0), pch=21, cex=cex)
}
dlines <- function(x, y, col) {
lines(x, y, lwd=2.5)
lines(x, y, col=col)
}
par(mar=c(5,5,0,1))
plot(date, div, type='n', las=1, cex.axis=0.6, cex.lab=0.7, bty='n',
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
xx <- floor_date(seq(min(date), max(date), length.out=5), unit="months")
min(date)
date
class(date)
plot(date, div, type='n', las=1, cex.axis=0.6, cex.lab=0.7, bty='n',
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
xx <- floor_date(seq(min(date), max(date), length.out=5), unit="months")
max(date)
min(date)
test<-c("2022-12-01","2022-11-01","2022-10-01")
test<-as.Date(test)
min(test)
date
data<-as.Date(date)
min(date)
unique(date)
head(metasub1)
unique(metadataRTT$Date)
index1
name_list[1]
name_list[2]
date[1]
pg[1]
rooted <- read.tree('./data_needed/iqtree_trimmed_noBA2.nwk')
metadataRTT <- metasub1
voc<-names(pal)
name_list<-rooted$tip.label
name_list[1]
match(name_list[1],metadataRTT)
metasub1 <- read.delim( "./data_needed/subsampling_metadata_V1.tsv")
MLtree_sub1 <- read.tree("./data_needed/iqtree_trimmed_noBA2.nwk")
ttree_sub1 <- read.tree("./data_needed/subsample_V1_timetree.nwk")
### needed for plotting
pango_frame<-metaCANall[c("Pango_lineage","pango.group")]
pango_col<-pango_frame %>% distinct()#make a lookup table for all lineages to pango.group
metasub1<-merge(metasub1,pango_col,by.x="Variant",by.y="Pango_lineage",all.y=FALSE)
head(metasub1)
metasub1 <- read.delim( "./data_needed/subsampling_metadata_V1.tsv")
MLtree_sub1 <- read.tree("./data_needed/iqtree_trimmed_noBA2.nwk")
ttree_sub1 <- read.tree("./data_needed/subsample_V1_timetree.nwk")
### needed for plotting
pango_frame<-metaCANall[c("Pango_lineage","pango.group")]
pango_col<-pango_frame %>% distinct()#make a lookup table for all lineages to pango.group
metasub1<-merge(metasub1,pango_col,by.x="Variant",by.y="Pango_lineage",all.y=FALSE,all.x=TRUE)
head(metasub1)
### metadata and trees
metasub1 <- read.delim( "./data_needed/subsampling_metadata_V1.tsv")
head(metasub1)
pango_frame<-metaCANall[c("Pango_lineage","pango.group")]
pango_col<-pango_frame %>% distinct()#make a lookup table for all lineages to pango.group
metasub1<-merge(metasub1,pango_col,by.x="Variant",by.y="Pango_lineage",all.y=FALSE,all.x=TRUE)
head(metasub1)
match(name_list[1],metasub1$EPI)
division_frame<-metaCANall[c("Virus_name","province")]
metasub1<-merge(metasub1,division_frame,by.x="GISAID",by.y="Virus_name",all.y=FALSE,all.x=TRUE)
listpangogp<-unique(metasub1$pango.group)
listpangogp<-sort(listpangogp)
#division colours for heatmap
df_PTs <-data.frame(divisions=metasub1$province) #make df for heatmaps
rownames(df_PTs) <- metasub1$EPI #needs row names for heatmaps
metasub1<-merge(metasub1,division_frame,by.x="GISAID",by.y="Virus_name",all.y=FALSE,all.x=TRUE)
metasub1 <- read.delim( "./data_needed/subsampling_metadata_V1.tsv")
MLtree_sub1 <- read.tree("./data_needed/iqtree_trimmed_noBA2.nwk")
ttree_sub1 <- read.tree("./data_needed/subsample_V1_timetree.nwk")
### needed for plotting
pango_frame<-metaCANall[c("Pango_lineage","pango.group")]
pango_col<-pango_frame %>% distinct()#make a lookup table for all lineages to pango.group
metasub1<-merge(metasub1,pango_col,by.x="Variant",by.y="Pango_lineage",all.y=FALSE,all.x=TRUE)
division_frame<-metaCANall[c("Virus_name","province")]
metasub1<-merge(metasub1,division_frame,by.x="GISAID",by.y="Virus_name",all.y=FALSE,all.x=TRUE)
listpangogp<-unique(metasub1$pango.group)
listpangogp<-sort(listpangogp)
#division colours for heatmap
df_PTs <-data.frame(divisions=metasub1$province) #make df for heatmaps
rownames(df_PTs) <- metasub1$EPI #needs row names for heatmaps
match(name_list[1],metadataRTT)
metasub1 <- read.delim( "./data_needed/subsampling_metadata_V1.tsv")
MLtree_sub1 <- read.tree("./data_needed/iqtree_trimmed_noBA2.nwk")
ttree_sub1 <- read.tree("./data_needed/subsample_V1_timetree.nwk")
### needed for plotting
pango_frame<-metaCANall[c("Pango_lineage","pango.group")]
pango_col<-pango_frame %>% distinct()#make a lookup table for all lineages to pango.group
metasub1<-merge(metasub1,pango_col,by.x="Variant",by.y="Pango_lineage",all.y=FALSE,all.x=TRUE)
match(name_list[1],metadataRTT)
metasub1 <- read.delim( "./data_needed/subsampling_metadata_V1.tsv")
dim(metasub1)
pango_frame<-metaCANall[c("Pango_lineage","pango.group")]
pango_col<-pango_frame %>% distinct()#make a lookup table for all lineages to pango.group
metasub1<-merge(metasub1,pango_col,by.x="Variant",by.y="Pango_lineage",all.y=FALSE,all.x=TRUE)
dim(metasub1)
division_frame<-metaCANall[c("Virus_name","province")]
metasub1<-merge(metasub1,division_frame,by.x="GISAID",by.y="Virus_name",all.y=FALSE,all.x=TRUE)
dim(metasub1)
head(metasub1)
match(name_list[1],metasub1$EPI)
listpangogp<-unique(metasub1$pango.group)
listpangogp<-sort(listpangogp)
#division colours for heatmap
df_PTs <-data.frame(divisions=metasub1$province) #make df for heatmaps
rownames(df_PTs) <- metasub1$EPI #needs row names for heatmaps
#division colours
listPTs <- unique(metasub1$province)
listPTs <- listPTs[order(listPTs)]
listPTs <- listPTs[-11] #remove hubei
getpal2 <- colorRampPalette(brewer.pal(10, "Spectral")) #"Set3
pal2 <- getpal2(length(listPTs))
names(pal2) <- listPTs
mrdate <- max(na.omit(metasub1$Date))
p1 <- ggtree(ttree_sub1, mrsd = as.Date(mrdate)) %<+% metasub1[,c("EPI", "pango.group"), drop=FALSE] +
geom_tippoint(color="black", size=1)+
geom_tippoint(aes(color = pango.group), size=0.5)+ #, shape= lab
scale_color_manual(breaks=listpangogp,values=pal)+
#ggtitle("Time tree - Canada - downsample1")+
coord_cartesian(clip = 'off') + theme_tree2(plot.margin=margin(6, 40, 6, 6))+
guides(color = guide_legend(override.aes = list(size = 4) ) )+
theme(legend.position = "right", legend.title = element_blank(), legend.text = element_text(size =12))
plot1 <- gheatmap(p1, df_PTs[, "divisions", drop = FALSE], width= 0.1, color = F, colnames = F, legend_title = F) +
scale_fill_manual(breaks=listPTs, values = pal2)
### diversity ML tree
p2 <- ggtree(MLtree_sub1) %<+% metasub1[,c("EPI", "pango.group"), drop=FALSE] +
geom_tippoint(color="black", size=1)+
geom_tippoint(aes(color = pango.group), size=0.5)+
scale_color_manual(breaks=listpangogp, values = pal)+
#ggtitle("ML tree - Canada - subsample1, n = 8K")+
coord_cartesian(clip = 'off') + theme_tree2(plot.margin=margin(6, 40, 6, 6))+
guides(color = guide_legend(override.aes = list(size = 4) ) )+
theme(legend.position = "right", legend.title = element_blank(), legend.text = element_text(size =12))
plot2 <- gheatmap(p2, df_PTs[, "divisions", drop = FALSE], width= 0.1, color = F, colnames = F, legend_title = F) +
scale_fill_manual(breaks=listPTs, values = pal2)
rooted <- read.tree('./data_needed/iqtree_trimmed_noBA2.nwk')
metadataRTT <- metasub1
voc<-names(pal)
name_list<-rooted$tip.label
index1<-match(name_list,metadataRTT$EPI)
index1
date <- metadataRTT$Date[index1]
pg <- metadataRTT$pango.group[index1]
date<-as.Date(date)
# total branch length from root to each tip
div <- node.depth.edgelength(rooted)[1:Ntip(rooted)]
blobs <- function(x, y, col, cex=1) {
points(x, y, pch=21, cex=cex)
points(x, y, bg=col, col=rgb(0,0,0,0), pch=21, cex=cex)
}
dlines <- function(x, y, col) {
lines(x, y, lwd=2.5)
lines(x, y, col=col)
}
par(mar=c(5,5,0,1))
plot(date, div, type='n', las=1, cex.axis=0.6, cex.lab=0.7, bty='n',
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
xx <- floor_date(seq(min(date), max(date), length.out=5), unit="months")
axis(side=1, at=xx, label=format(xx, "%b %Y"), cex.axis=0.6)
blobs(date[pg=='other'], div[pg=='other'], col='grey', cex=0.8)
fit0 <- rlm(div[pg=='other'] ~ date[pg=='other'])
abline(fit0, col='gray50')
fits <- list(other=fit0)
for (i in 1:length(vocs)) {
variant <- vocs[i]
x <- date[pg==pango.group]
if (all(is.na(x))) next
y <- div[pg==pango.group]
blobs(x, y, col=pal[i], cex=0.8)
fit <- rlm(y ~ x)
dlines(fit$x[,2], predict(fit), col=pal[i])
fits[[variant]] <- fit
}
vocs<-names(pal)
for (i in 1:length(vocs)) {
variant <- vocs[i]
x <- date[pg==pango.group]
if (all(is.na(x))) next
y <- div[pg==pango.group]
blobs(x, y, col=pal[i], cex=0.8)
fit <- rlm(y ~ x)
dlines(fit$x[,2], predict(fit), col=pal[i])
fits[[variant]] <- fit
}
pg
pal
voc[1]
voc[2]
head(date)
pg
for (i in 1:length(vocs)) {
variant <- vocs[i]
x <- date[pg==variant]
if (all(is.na(x))) next
y <- div[pg==variant]
blobs(x, y, col=pal[i], cex=0.8)
fit <- rlm(y ~ x)
dlines(fit$x[,2], predict(fit), col=pal[i])
fits[[variant]] <- fit
}
par(mar=c(5,5,0,1))
plot(date, div, type='n', las=1, cex.axis=0.6, cex.lab=0.7, bty='n',
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
xx <- floor_date(seq(min(date), max(date), length.out=5), unit="months")
axis(side=1, at=xx, label=format(xx, "%b %Y"), cex.axis=0.6)
blobs(date[pg=='other'], div[pg=='other'], col='grey', cex=0.8)
fit0 <- rlm(div[pg=='other'] ~ date[pg=='other'])
abline(fit0, col='gray50')
fits <- list(other=fit0)
for (i in 1:length(vocs)) {
variant <- vocs[i]
x <- date[pg==variant]
if (all(is.na(x))) next
y <- div[pg==variant]
blobs(x, y, col=pal[i], cex=0.8)
fit <- rlm(y ~ x)
dlines(fit$x[,2], predict(fit), col=pal[i])
fits[[variant]] <- fit
}
legend(x=min(tip.dates), y=max(div), legend=vocs, pch=21, pt.bg=pal, bty='n', cex=0.8)
legend(x=min(dates), y=max(div), legend=vocs, pch=21, pt.bg=pal, bty='n', cex=0.8)
par(mar=c(5,5,0,1))
plot(date, div, type='n', las=1, cex.axis=0.6, cex.lab=0.7, bty='n',
xaxt='n', xlab="Sample collection date", ylab="Divergence from root")
xx <- floor_date(seq(min(date), max(date), length.out=5), unit="months")
axis(side=1, at=xx, label=format(xx, "%b %Y"), cex.axis=0.6)
blobs(date[pg=='other'], div[pg=='other'], col='grey', cex=0.8)
fit0 <- rlm(div[pg=='other'] ~ date[pg=='other'])
abline(fit0, col='gray50')
fits <- list(other=fit0)
for (i in 1:length(vocs)) {
variant <- vocs[i]
x <- date[pg==variant]
if (all(is.na(x))) next
y <- div[pg==variant]
blobs(x, y, col=pal[i], cex=0.8)
fit <- rlm(y ~ x)
dlines(fit$x[,2], predict(fit), col=pal[i])
fits[[variant]] <- fit
}
legend(x=min(date), y=max(div), legend=vocs, pch=21, pt.bg=pal, bty='n', cex=0.8)
ci <- lapply(fits, confint.default)
kable(data.frame(
n=sapply(fits, function(f) nrow(f$x)),
est=29970*sapply(fits, function(f) f$coef[2]),
lower.95=29970*sapply(ci, function(f) f[2,1]),
upper.95=29970*sapply(ci, function(f) f[2,2])
),
col.names = c("Number of genomes", "Estimate", "Lower 95% CI", "Upper 95% CI"),
format="html", align="rrrr", caption="Molecular clock rates (subs/genome/day)",
format.args = list(scientific = FALSE), digits=4, table.attr = "style='width:100%;'")
len(date)
length(date)
#coding and data
library(tidyverse) # wrangling and everything really
#coding and data
library(tidyverse) # wrangling and everything really
library(knitr) # Needed to set root directory
library(reticulate) # Needed for the Python code chunk
#knitr::knit_engines$set(python = reticulate::eng_python)
library(lubridate) # dates are special
#phylo-specific
library(treeio)
library(phylotools)
install.packages("phylotools")
library(phytools)
library(phylotools)
phangorn
install.packages("reticulate")
library(reticulate) # Needed for the Python code chunk
install.packages("tidytree")
install.packages("phangorn")
library(phytools)
install.packages("phytools")
#plotting and tables
library(ggplot2) # Work-horse plotting package
library(ggtree) #All things phylogenetic visualization
install.packages("ggtree")
library(cowplot) # Needed to make easy multi-panel plots with ggplot2
install.packages("cowplot")
library(cowplot) # Needed to make easy multi-panel plots with ggplot2
install.packages("DT")
install.packages("ggbeeswarm")
install.packages("gridExtra")
install.packages("kableExtra")
install.packages("scales")
install.packages("RColorBrewer")
install.packages("colorspace")
install.packages("viridis")
install.packages("MASS")
---
title: "CoVaRR-Net"
subtitle: "Proof of concept: Genomic epidemiology analyses and mathematical modelling notebook"
author: "Pillar 6"
date: '`r format(Sys.Date(), "%B %d, %Y")`'
output:
html_document:
code_folding: hide
theme: cerulean
toc: true
toc_float: true
---
```{r setup, include=FALSE}
#coding and data
library(tidyverse) # wrangling and everything really
library(knitr) # Needed to set root directory
library(reticulate) # Needed for the Python code chunk
#py_install("pandas") #install pandas in virtual environment
#use_virtualenv(virtualenv = "r-reticulate")
use_condaenv("r-reticulate")
#knitr::knit_engines$set(python = reticulate::eng_python)
library(lubridate) # dates are special
#phylo-specific
library(treeio)
install.packages("treeio")
library(reticulate) # Needed for the Python code chunk
py_install("pandas")
Y
use_virtualenv(virtualenv = "r-reticulate")
use_condaenv("r-reticulate")
#knitr::knit_engines$set(python = reticulate::eng_python)
library(lubridate) # dates are special
#phylo-specific
library(treeio)
#phylo-specific
library(treeio)
library(phylotools)
library(tidytree)
library(phangorn)
library(phytools)
#plotting and tables
library(ggplot2) # Work-horse plotting package
library(ggtree) #All things phylogenetic visualization
library(cowplot) # Needed to make easy multi-panel plots with ggplot2
library(DT) # Needed to make DT example table
library(ggbeeswarm) # Needed to make beeswarm plots
library(gridExtra) # multi-panel plots
library(kableExtra) # Needed to write out a formatted table
library(scales)
#colors
library(RColorBrewer)
library(colorspace)
library(viridis)
library(MASS)
library(bbmle)
library(HelpersMG)
theme_set(theme_classic())
## 1. LOAD processed metadata of Canadian sequences (with latest pangolin, division, and full seq IDs)
#Download metadata from gisaid, put the date here:
gisaiddate="2022_03_01"
metaCANall <- read.csv(unz("./data_needed/metadata_CANall_last.zip",paste("metadata_CANall_",gisaiddate,".csv",sep="")),sep="\t",row.names=NULL)
metaCANall <- read.csv(unz("./data_needed/metadata_CANall_last.zip",paste("metadata_CANall_",gisaiddate,".csv",sep="")),sep="\t",row.names=NULL)
metaCANall$Collection_date <- as.Date(metaCANall$Collection_date)
metaCANall$province <- sapply(strsplit(metaCANall$Location,"_/_"), `[`, 3)
metaCANall$province [metaCANall$province  == "Newfoundland"] <- "Newfoundland_and_Labrador"
metaCANall$province [metaCANall$province  == "Labrador"] <- "Newfoundland_and_Labrador"
metaCANall$province [metaCANall$province  == "Labrador"] <- "Newfoundland_and_Labrador"
#make a pango.group column
VOCVOI <- data.frame(name = character(),pattern = character(),color = numeric())
VOCVOI[nrow(VOCVOI)+1, ]=list("Alpha",         "B.1.1.7|Q.","#B29C71")
VOCVOI[nrow(VOCVOI)+1, ]=list("Beta",         "B.1.351",   "#F08C3A") #Beta
VOCVOI[nrow(VOCVOI)+1, ]=list("Gamma",         "P.",        "#444444")
VOCVOI[nrow(VOCVOI)+1, ]=list("Delta",         "B.1.617|AY.","#A6CEE3")
VOCVOI[nrow(VOCVOI)+1, ]=list("Delta AY.25",   "AY.25",       "#61A6A0")
VOCVOI[nrow(VOCVOI)+1, ]=list("Delta AY.27",   "AY.27",       "#438FC0")
VOCVOI[nrow(VOCVOI)+1, ]=list("Lambda",       "C.37|C.37.1", "#CD950C")#lambda
VOCVOI[nrow(VOCVOI)+1, ]=list("Omicron BA.1",  "B.1.1.529|BA.1","#8B0000")
VOCVOI[nrow(VOCVOI)+1, ]=list("Omicron BA.1.1","BA.1.1",       "#FA8072")
VOCVOI[nrow(VOCVOI)+1, ]=list("Omicron BA.2",  "BA.2",         "#FF0000")
VOCVOI[nrow(VOCVOI)+1, ]=list("Mu",           "B.1.621",      "#BB4513")#Mu
VOCVOI[nrow(VOCVOI)+1, ]=list("A.23.1",        "A.23.1",       "#9AD378")
VOCVOI[nrow(VOCVOI)+1, ]=list("B.1.438.1",     "B.1.438.1",    "#3EA534")
#make a pango.group column
metaCANall$pango.group <-"other"
pal=rainbow(0)
pal["other"]="grey"
for (row in 1:nrow(VOCVOI)) {
name <- VOCVOI[row, "name"]
pattern=gsub("\\.",".",VOCVOI[row, "pattern"])
metaCANall$pango.group[grepl(pattern, metaCANall$Pango_lineage)] <- name
pal[name]=VOCVOI[row, "color"]
}
